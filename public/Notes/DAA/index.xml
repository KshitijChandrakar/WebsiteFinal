<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Carmelia Rose</title>
    <link>//localhost:1313/Notes/DAA/</link>
    <description>Recent content on Carmelia Rose</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 17 Aug 2024 00:45:35 +0530</lastBuildDate>
    <atom:link href="//localhost:1313/Notes/DAA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DAA August 9</title>
      <link>//localhost:1313/Notes/DAA/DAA-9-August-2024/</link>
      <pubDate>Fri, 09 Aug 2024 10:58:08 -0400</pubDate>
      <guid>//localhost:1313/Notes/DAA/DAA-9-August-2024/</guid>
      <description>&#xD;Suggested Books:&#xD;#&#xD;Thomas H Orman - DAA&#xA;Algorithm Design Manual&#xA;GCD Code:&#xA;def gcd(m,n): while n != 0 do: r = m mod n m = n n = r return m def gcd(m,n): t = min (m,n) while true: if m%t = 0: if n%t = 0: return t t = t - 1 General Approaches To Algorithm Design&#xA;Divide and Conquer Greedy Method Dynamic Programming Basic Search and Traversal Graph Theory Linear Programming Approximation Algorithm NP Problem HW 9 Aug: Find the prime factors of a given number </description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/Notes/DAA/Assignment-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/Notes/DAA/Assignment-1/</guid>
      <description>Assignment 1 DAA&#xD;#&#xD;Name: Kshitij Chandrakar Batch: 49 SAP: 500124827&#xA;Q2:&#xD;#&#xD;Code:&#xD;#&#xD;#include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;utility&amp;gt; using namespace std; const int TotalUsers = 4; void allocateBandwidth(const string users[], const int userBandwidth[], const int userValues[], const int totalBandwidth) { double VBRatio[TotalUsers]; // Calculate value-to-bandwidth ratios for (int i = 0; i &amp;lt; TotalUsers; ++i) { VBRatio[i] = static_cast&amp;lt;double&amp;gt;(userValues[i]) / userBandwidth[i]; } // Sort users by value-to-bandwidth ratio for (int i = 0; i &amp;lt; TotalUsers - 1; ++i) { for (int j = 0; j &amp;lt; TotalUsers - i - 1; ++j) { if (VBRatio[j] &amp;lt; VBRatio[j + 1]) { swap(VBRatio[j], VBRatio[j + 1]); swap(users[j], users[j + 1]); swap(userBandwidth[j], userBandwidth[j + 1]); swap(userValues[j], userValues[j + 1]); } } } int remainingBandwidth = totalBandwidth; double totalValue = 0.</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/Notes/DAA/Syllabus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/Notes/DAA/Syllabus/</guid>
      <description>![[DAA_ Syllabus Th+Lab.pdf]]</description>
    </item>
  </channel>
</rss>
